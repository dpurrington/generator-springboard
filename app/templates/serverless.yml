# For more info on the format of this file and all options available,
# See https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <%= serviceName %>
provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 512
  # VPC, if desired
  #vpc:
  #  securityGroupIds:
  #    'Fn::Split':
  #     - ','
  #     - ${env:SECURITY_GROUPS}
  #  subnetIds:
  #    'Fn::Split':
  #     - ','
  #     - ${env:SUBNETS}
  environment:
    STAGE: ${opt:stage}
    # Configure the name of the table for lambdas, if relevant
    # MAIN_TABLE: ${self:service}-main-${opt:stage}

  # Enable access to any extra resources in the stack (e.g., DynamoDB table)
  iamRoleStatements:
    - Effect: Allow
      Action:
          - "lambda:*"
      Resource: "*"
  #  - Effect: Allow
  #    Action:
  #      - "dynamodb:*"
  #    Resource:
  #      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${opt:stage}
  #      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${opt:stage}/*

plugins:
  # This plugin lets you use the #{AWS::} parameters
  - serverless-pseudo-parameters
  # This plugin ensures there is at least one warm Lambda instance
  - serverless-plugin-warmup
  - serverless-offline
  # TODO: is a log forwarding plugin needed here?

custom:
  warmup:
    enabled: true
  # If using an API gateway custom authorizer (account-wide), describe it here
  #<<: &authorizer
  #  arn: ${env:AUTHORIZER_ARN}
  #  identityValidationExpression: ^Bearer +[-0-9a-zA-Z\._]*$
  #  resultTtlInSeconds: 300
  serverless-offline:
    port: 3001
  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - Accept-Enconding
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Origin
    allowCredentials: false
  # settings for forwarding logs (streaming) to a forwarding lambda (account-wide)
  #logForwarding:
  #  destinationARN: ${env:LOGFORWARDING_CLOUDWATCH_ARN}
  #  filterPattern: '-START -END -REPORT'
functions:
  service-handler:
    handler: src/server.handler
    # If using log forwarding, enable it here
    #logForwarding:
    #  enabled: true
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: ${self:custom.cors}
          # Specify custom authorizer if being used
          # authorizer: *authorizer

# Define additional resources here. If you add something here, don't forget
# to add permission for your Lambdas to access it by adding permissions in the
# iamRoleStatements section.
# Here's an example of a basic DynamoDB table
#resources:
#  Resources:
#    mainTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:service}-main-${opt:stage}
#        AttributeDefinitions:
#          - AttributeName: id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: id
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
