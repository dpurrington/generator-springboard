service: <%= serviceName -%>

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 512
<% if (vpc) { -%>
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_ID}
      - ${env:SUBNET2_ID}
<% } -%>
  environment:
    STAGE: ${opt:stage}
<% if (dynamodb) { -%>
    MAIN_TABLE: ${self:service}-main-${opt:stage}
<% } -%>
<% if (serviceType === 'web service') { -%>
    API_ROOT:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.#{AWS::Region}.amazonaws.com/${opt:stage}"
<% } -%>

<% if (dynamodb) { -%>
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${opt:stage}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${opt:stage}/*

<% } -%>
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-warmup
<% if (serviceType === 'web service') { -%>
  - serverless-offline
<% } -%>
<% if (dynamodb) { -%>
  - serverless-dynamodb-local
<% } -%>

package:
  exclude:
    - test/**

custom:
  warmup:
    default: true
<% if (authorizer) { -%>
  <<: &authorizer
    arn: ${env:AUTHORIZER_ARN}
    identityValidationExpression: ^Bearer +[-0-9a-zA-Z\._]*$
    resultTtlInSeconds: 300
<% } -%>
<% if (logForwarding) { -%>
  logForwarding:
    destinationARN: ${env:LOGFORWARDING_CLOUDWATCH_ARN}
    filterPattern: '-START -END -REPORT'
<% } -%>
<% if (serviceType === 'web service') { -%>
  serverless-offline:
    port: 3001
  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - Accept-Enconding
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Origin
    allowCredentials: false
<% } -%>
<% if (dynamodb) { -%>
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
<% } -%>

<% if (dynamodb) { -%>
resources:
  Resources:
    mainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-main-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

<% } -%>
functions:
<% if (serviceType === 'scheduled task') { -%>
  do-thing:
    handler: app/handler.doThing
<% if (logForwarding) { -%>
    logForwarding:
      enabled: true
<% } -%>
    events:
      - schedule: rate(5 minutes)
<% } -%>
<% if (serviceType === 'web service') { -%>
  get-thing:
    handler: app/handler.getThing
<% if (logForwarding) { -%>
    logForwarding:
      enabled: true
<% } -%>
    events:
      - http:
          path: things/{id}
          method: get
          cors: ${self:custom.cors}
<% if (authorizer) { -%>
          authorizer: *authorizer
<% } -%>
<% } -%>
